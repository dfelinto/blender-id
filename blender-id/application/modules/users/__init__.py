import datetime
from flask import jsonify
from flask import request
from flask_security.utils import verify_password
import oauthlib.common

from application import app
from application import db
from application.modules.users.model import UsersRestTokens
from application.modules.users.model import user_datastore

DEFAULT_OAUTH_TOKEN_SCOPE = 'email'


def create_oauth_token(user, host_label):
    """Creates an OAuth token for this user.

    This token is not generated by the OAuth library, but is designed to be accepted by it.

    @param user: the user for whom to create a token.
    @param host_label: a label for identifying the host (i.e. authenticated) application.

    @return: the token object
    @rtype: application.modules.oauth.model.Token
    """

    expires = datetime.datetime.now() + datetime.timedelta(**app.config['BLENDER_ID_TOKEN_EXPIRY'])

    # Late import to prevent circular dependencies
    from application.modules.oauth.model import Token

    tok = Token(
        access_token=oauthlib.common.generate_token(),
        refresh_token=oauthlib.common.generate_token(),
        token_type='Bearer',
        _scopes=DEFAULT_OAUTH_TOKEN_SCOPE,
        expires=expires,
        client_id=app.config['BLENDER_ID_ADDON_CLIENT_ID'],
        user_id=user.id,
        host_label=host_label,
    )
    db.session.add(tok)
    db.session.commit()
    return tok


@app.route('/u/identify', methods=['POST'])
def verify_identity():
    """Entry point that generates an authentication token, given exsiting
    and valid username and password. The token can be used as alternative
    authentication system for REST based services (e.g. Attract).
    """

    username = request.form['username']
    password = request.form['password']
    host_label = request.form['host_label']

    user = user_datastore.get_user(username)
    if not user:
        return jsonify(status='fail', data={'username': 'User does not exist'})
    if not verify_password(password, user.password):
        # TODO Throttle authentication attempts (limit to 3 or 5)
        # We need to address the following cases:
        # - the user already has a token-host_label pair
        # - the user never autheticated before (where do we store such info?)
        return jsonify(status='fail', data={'password': 'Wrong password'})

    token = create_oauth_token(user, host_label)

    return jsonify(
        status='success',
        data={
            'user_id': user.id,
            'oauth_token': {
                'access_token': token.access_token,
                'refresh_token': token.refresh_token,
                'expires': token.expires,
            },
        })


@app.route('/u/validate_token', methods=['POST'])
def validate_token():
    """Validate and existing authentication token. This is usually called by
    a third party (e.g. Attract) every few requests to confirm the identity
    of a user.
    """

    token = request.form['token']

    # Late import to prevent circular dependencies
    from application.modules.oauth.model import Token

    token_info = Token.query.filter_by(access_token=token).first()
    if token_info is None:
        response = jsonify(
            status='fail',
            data={'token': 'Token is invalid'})
        response.status_code = 403
        return response

    # Database constraints ensure that this user actually exists.
    user = user_datastore.get_user(token_info.user_id)

    return jsonify(
        status='success',
        data={'user': {
            'email': user.email,
            'id': user.id
        }})


@app.route('/u/delete_token', methods=['POST'])
def delete_token():
    """Delete a token for a certain user_id. This can be turned into a proper
    RESTful request by making it a DELETE method and checking the identity
    via the header.
    """

    user_id = request.form['user_id']
    token = request.form['token']

    # Late import to prevent circular dependencies
    from application.modules.oauth.model import Token

    oauth_token = Token.query.filter_by(user_id=user_id, access_token=token).first()
    if not oauth_token:
        return jsonify(status='fail', data={'message': 'ole'})

    db.session.delete(oauth_token)
    db.session.commit()

    return jsonify(
        status='success',
        data={'message': 'ole'})
